ccode_sources = [
    'valaccodeassignment.vala',
    'valaccodebinaryexpression.vala',
    'valaccodeblock.vala',
    'valaccodebreakstatement.vala',
    'valaccodecasestatement.vala',
    'valaccodecastexpression.vala',
    'valaccodecommaexpression.vala',
    'valaccodecomment.vala',
    'valaccodeconditionalexpression.vala',
    'valaccodeconstant.vala',
    'valaccodecontinuestatement.vala',
    'valaccodedeclaration.vala',
    'valaccodedeclarator.vala',
    'valaccodedostatement.vala',
    'valaccodeelementaccess.vala',
    'valaccodeemptystatement.vala',
    'valaccodeenum.vala',
    'valaccodeenumvalue.vala',
    'valaccodeexpressionstatement.vala',
    'valaccodeexpression.vala',
    'valaccodefile.vala',
    'valaccodeforstatement.vala',
    'valaccodefragment.vala',
    'valaccodefunctioncall.vala',
    'valaccodefunctiondeclarator.vala',
    'valaccodefunction.vala',
    'valaccodegotostatement.vala',
    'valaccodeidentifier.vala',
    'valaccodeifsection.vala',
    'valaccodeifstatement.vala',
    'valaccodeincludedirective.vala',
    'valaccodeinitializerlist.vala',
    'valaccodeinvalidexpression.vala',
    'valaccodelabel.vala',
    'valaccodelinedirective.vala',
    'valaccodemacroreplacement.vala',
    'valaccodememberaccess.vala',
    'valaccodemodifiers.vala',
    'valaccodenewline.vala',
    'valaccodenode.vala',
    'valaccodeoncesection.vala',
    'valaccodeparameter.vala',
    'valaccodeparenthesizedexpression.vala',
    'valaccodereturnstatement.vala',
    'valaccodestatement.vala',
    'valaccodestruct.vala',
    'valaccodeswitchstatement.vala',
    'valaccodetypedefinition.vala',
    'valaccodeunaryexpression.vala',
    'valaccodevariabledeclarator.vala',
    'valaccodewhilestatement.vala',
    'valaccodewriter.vala']

ccode_lib = library('ccode', ccode_sources, dependencies: [glib, gobject, valagee, vala])
ccode = declare_dependency(link_with: ccode_lib, include_directories: include_directories('.'))
